AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample Node.js application for security pipeline

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, beta, prod]
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  # Lambda function for the Node.js application
  NodeJSAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-nodejs-app-${Environment}"
      CodeUri: src/
      Handler: lambda.handler
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref NodeJSAppApi
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref NodeJSAppApi

  # API Gateway
  NodeJSAppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # CloudWatch Log Group
  NodeJSAppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${NodeJSAppFunction}"
      RetentionInDays: 14

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${NodeJSAppApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl-${Environment}"
  
  FunctionName:
    Description: Lambda function name
    Value: !Ref NodeJSAppFunction
    Export:
      Name: !Sub "${AWS::StackName}-FunctionName-${Environment}"
